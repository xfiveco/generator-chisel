<?php

namespace Chisel;

/**
 * Class for enqueuing scripts and styles.
 *
 * @package Chisel
 */
class Assets implements Instance {

	/**
	 * Front-end styles to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $frontend_styles = array();

	/**
	 * Front-end scripts to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $frontend_scripts = array();

	/**
	 * Admin styles to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $admin_styles = array();

	/**
	 * Admin scripts to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $admin_scripts = array();

	/**
	 * Editor styles to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $editor_styles = array();

	/**
	 * Editor scripts to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $editor_scripts = array();

	/**
	 * Login page styles to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $login_styles = array();

	/**
	 * Login page scripts to be registered and enqueued.
	 *
	 * @var array
	 */
	protected $login_scripts = array();

	/**
	 * WP React Refresh runtime dependency.
	 *
	 * @var string
	 */
	protected $refresh_runtime_dependency = 'wp-react-refresh-runtime';

	/**
	 * Class constructor.
	 */
	private function __construct() {
		$this->set_properties();
		$this->action_hooks();
		$this->filter_hooks();
	}

	/**
	 * Set properties.
	 */
	public function set_properties() {
		// This is a required script for React Refresh. It is generated by Webpack and only exists in development mode.
		$runtime_script = array(
			'src'       => get_template_directory_uri() . '/build/runtime.js',
			'deps'      => array( $this->refresh_runtime_dependency ),
			'strategy'  => false,
			'condition' => function () {
				return self::is_fast_refresh();
			},
		);

		if ( ! is_admin() ) {
			$this->frontend_styles = apply_filters(
				'chisel_frontend_styles',
				array(
					'main'        => array(),
					'woocommerce' => array(
						'condition' => Woocommerce::is_woocommerce_active(),
					),
				)
			);

			$this->frontend_scripts = apply_filters(
				'chisel_frontend_scripts',
				array(
					'runtime' => $runtime_script,
					'app'     => array(
						'deps'     => array( 'wp-i18n' ),
						'localize' => array(
							'name' => 'chiselScripts',
							'data' => array(
								'ajax' => array(
									'url'   => esc_url( Ajax::get_ajax_endpoint_url() ),
									'nonce' => wp_create_nonce( 'wp_rest' ), // this (wp_rest) authenticates users and allows using get_current_user functions in rest api endpoints.
								),
							),
						),
					),
				)
			);

			if ( is_login() ) {
				$this->login_styles = apply_filters(
					'chisel_login_styles',
					array(
						'login' => array(),
					)
				);

				$this->login_scripts = apply_filters(
					'chisel_login_scripts',
					array(
						'runtime' => $runtime_script,
						'login'   => array(
							'localize' => array(
								'name' => 'chiselScripts',
								'data' => array(
									'logoUrl' => Helpers::get_login_page_logo_url(),
								),
							),
						),
					)
				);
			}
		} else {
			$this->admin_styles = apply_filters(
				'chisel_admin_styles',
				array(
					'admin' => array(),
				)
			);

			$this->admin_scripts = apply_filters(
				'chisel_admin_scripts',
				array(
					'runtime' => $runtime_script,
					'admin'   => array(
						'localize' => array(
							'name' => 'chiselAdminScripts',
							'data' => array(
								'acfColorPickerPalette' => Helpers::get_colors_palette( 'acf' ),
							),
						),
					),
				)
			);

			$this->editor_styles = apply_filters(
				'chisel_editor_styles',
				array(
					'editor' => array(),
				)
			);

			$this->editor_scripts = apply_filters(
				'chisel_editor_scripts',
				array(
					'editor' => array(),
				)
			);
		}
	}

	/**
	 * Register action hooks.
	 */
	public function action_hooks() {
		add_action( 'init', array( $this, 'register_assets' ) );

		add_action( 'wp_enqueue_scripts', array( $this, 'enqueue_frontend_assets' ), 99 ); // Higher priority, overwrite plugins if needed.
		add_action( 'admin_enqueue_scripts', array( $this, 'enqueue_admin_assets' ), 11 );
		add_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_editor_scripts' ) );
		add_action( 'login_enqueue_scripts', array( $this, 'enqueue_login_page_assets' ), 99 );

		// Removes PHP Notice: Function wp_enqueue_script() was called incorrectly. "wp-editor" script should not be enqueued together with the new widgets editor (wp-edit-widgets or wp-customize-widgets).
		remove_action( 'admin_head', 'wp_check_widget_editor_deps' );
	}

	/**
	 * Register filter hooks.
	 */
	public function filter_hooks() {
	}

	/**
	 * Register assets.
	 */
	public function register_assets() {
		if ( $this->frontend_scripts ) {
			foreach ( $this->frontend_scripts as $file_name => $args ) {
				$this->register_script( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->frontend_styles ) {
			foreach ( $this->frontend_styles as $file_name => $args ) {
				$this->register_style( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->login_styles ) {
			$login_styles_data = array();

			foreach ( $this->login_styles as $file_name => $args ) {
				$login_styles_data = $this->register_style( self::get_final_handle( $file_name ), $file_name, $args );
			}

			if ( isset( $login_styles_data['ver'] ) ) {
				wp_register_style( 'global-styles', false, array(), $login_styles_data['ver'] );
			}
		}

		if ( $this->login_scripts ) {
			foreach ( $this->login_scripts as $file_name => $args ) {
				$this->register_script( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->admin_scripts ) {
			foreach ( $this->admin_scripts as $file_name => $args ) {
				$this->register_script( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->admin_styles ) {
			foreach ( $this->admin_styles as $file_name => $args ) {
				$this->register_style( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->editor_scripts ) {
			foreach ( $this->editor_scripts as $file_name => $args ) {
				$this->register_script( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}

		if ( $this->editor_styles ) {
			foreach ( $this->editor_styles as $file_name => $args ) {
				$this->register_style( self::get_final_handle( $file_name ), $file_name, $args );
			}
		}
	}

	/**
	 * Enqueue front-end assets.
	 */
	public function enqueue_frontend_assets() {
		if ( $this->frontend_scripts ) {
			foreach ( $this->frontend_scripts as $handle => $args ) {
				wp_enqueue_script( self::get_final_handle( $handle ) );
				$this->set_script_translations( $handle, $args );
			}
		}

		if ( $this->frontend_styles ) {
			foreach ( $this->frontend_styles as $handle => $args ) {
				wp_enqueue_style( self::get_final_handle( $handle ) );

				// Enqueue js file for fast refresh of the css file.
				$this->enqueue_style_js_for_dev( $handle );
			}
		}
	}

	/**
	 * Enqueue admin assets.
	 */
	public function enqueue_admin_assets() {
		if ( $this->admin_scripts ) {
			foreach ( $this->admin_scripts as $handle => $args ) {
				wp_enqueue_script( self::get_final_handle( $handle ) );
				$this->set_script_translations( $handle, $args );
			}
		}

		if ( $this->admin_styles ) {
			foreach ( $this->admin_styles as $handle => $args ) {
				wp_enqueue_style( self::get_final_handle( $handle ) );

				// Enqueue js file for fast refresh of the css file.
				$this->enqueue_style_js_for_dev( $handle );
			}
		}
	}

	/**
	 * Enqueue editor scripts.
	 */
	public function enqueue_editor_scripts() {
		if ( $this->editor_scripts ) {
			foreach ( $this->editor_scripts as $handle => $args ) {
				wp_enqueue_script( self::get_final_handle( $handle ) );
				$this->set_script_translations( $handle, $args );
			}
		}

		if ( $this->editor_styles ) {
			foreach ( $this->editor_styles as $handle => $args ) {
				wp_enqueue_style( self::get_final_handle( $handle ) );

				// Enqueue js file for fast refresh of the css file.
				$this->enqueue_style_js_for_dev( $handle );
			}
		}
	}

	/**
	 * Enqueue login page scripts.
	 */
	public function enqueue_login_page_assets() {
		$stylesheet = wp_get_global_stylesheet();

		if ( empty( $stylesheet ) ) {
			return;
		}

		wp_add_inline_style( 'global-styles', $stylesheet );
		wp_enqueue_style( 'global-styles' );

		if ( $this->login_scripts ) {
			foreach ( $this->login_scripts as $handle => $args ) {
				wp_enqueue_script( self::get_final_handle( $handle ) );
				$this->set_script_translations( $handle, $args );
			}
		}

		if ( $this->login_styles ) {
			foreach ( $this->login_styles as $handle => $args ) {
				wp_enqueue_style( self::get_final_handle( $handle ) );
			}
		}
	}

	/**
	 * Register style wrapper function.
	 *
	 * @param string $handle
	 * @param string $file_name
	 * @param array  $args
	 *
	 * @return void
	 */
	protected function register_style( $handle, $file_name, $args ) {
		$asset_data = $this->get_asset( $file_name, 'css' );

		$src       = isset( $args['src'] ) ? $args['src'] : $this->get_style_src( $file_name );
		$deps      = isset( $args['deps'] ) ? $args['deps'] : array();
		$ver       = isset( $args['ver'] ) ? $args['ver'] : $asset_data['version'];
		$media     = isset( $args['media'] ) ? $args['media'] : 'all';
		$inline    = isset( $args['inline'] ) ? $args['inline'] : '';
		$condition = isset( $args['condition'] ) ? $args['condition'] : null;

		// Use condition to determine if the style should be registered. It can be either a boolean or a function.
		if ( $condition !== null ) {
			if ( is_callable( $condition ) ) {
				$condition = call_user_func( $condition );
			}

			if ( ! $condition ) {
				return;
			}
		}

		if ( $asset_data['dependencies'] ) {
			$deps = wp_parse_args( $asset_data['dependencies'], $deps );
		}

		wp_register_style( $handle, $src, $deps, $ver, $media );

		if ( $inline ) {
			wp_add_inline_style( $handle, $inline['data'] );
		}

		// Register js file for fast refresh of the css file.
		if ( self::is_fast_refresh() ) {
			$this->register_script(
				'style-' . $handle,
				$file_name,
				array(
					'src' => $this->get_style_src( $file_name, true ),
				),
			);
		}

		return array(
			'src'       => $src,
			'deps'      => $deps,
			'ver'       => $ver,
			'media'     => $media,
			'condition' => $condition,
			'handle'    => $handle,
		);
	}

	/**
	 * Register script wrapper function.
	 *
	 * @param string $handle
	 * @param string $file_name
	 * @param array  $args
	 *
	 * @return void
	 */
	protected function register_script( $handle, $file_name, $args ) {
		$asset_data = $this->get_asset( $file_name, 'js' );

		$src       = isset( $args['src'] ) ? $args['src'] : $this->get_script_src( $file_name );
		$deps      = isset( $args['deps'] ) ? $args['deps'] : array();
		$ver       = isset( $args['ver'] ) ? $args['ver'] : $asset_data['version'];
		$strategy  = isset( $args['strategy'] ) ? $args['strategy'] : true; // Strategy can be a boolean, which determines if the script should be enqueued in the footer, or an array with the following keys: 'in_footer':boolean and 'strategy':string (defer or async).
		$localize  = isset( $args['localize'] ) ? $args['localize'] : array();
		$inline    = isset( $args['inline'] ) ? $args['inline'] : '';
		$condition = isset( $args['condition'] ) ? $args['condition'] : null;

		// Use condition to determine if the script should be registered. It can be either a boolean or a function.
		if ( $condition !== null ) {
			if ( is_callable( $condition ) ) {
				$condition = call_user_func( $condition );
			}

			if ( ! $condition ) {
				return;
			}
		}

		if ( $asset_data['dependencies'] ) {
			$deps = wp_parse_args( $asset_data['dependencies'], $deps );
		}

		wp_register_script( $handle, $src, $deps, $ver, $strategy );

		if ( $localize ) {
			wp_localize_script( $handle, $localize['name'], $localize['data'] );
		}

		if ( $inline ) {
			wp_add_inline_script( $handle, $inline['data'], $inline['position'] );
		}

		return array(
			'src'       => $src,
			'deps'      => $deps,
			'ver'       => $ver,
			'strategy'  => $strategy,
			'condition' => $condition,
			'localize'  => $localize,
			'handle'    => $handle,
		);
	}

	/**
	 * Wrapper for wp_set_script_translations function.
	 *
	 * @param string $handle
	 * @param array  $args
	 *
	 * @return void
	 */
	protected function set_script_translations( $handle, $args ) {
		if ( isset( $args['deps'] ) && in_array( 'wp-i18n', $args['deps'], true ) ) {
			wp_set_script_translations( self::get_final_handle( $handle ), 'chisel', get_template_directory() . '/languages' );
		}
	}

	/**
	 * Enqueue style for development (fast refresh) mode.
	 *
	 * @param string $handle
	 *
	 * @return void
	 */
	protected function enqueue_style_js_for_dev( $handle ) {
		if ( self::is_fast_refresh() ) {
			wp_enqueue_script( 'style-' . self::get_final_handle( $handle ) );
		}
	}

	/**
	 * Get the script src url.
	 *
	 * @param string $file_name
	 *
	 * @return string
	 */
	protected function get_script_src( $file_name ) {
		return get_template_directory_uri() . '/build/scripts/' . $file_name . '.js';
	}

	/**
	 * Get the style src url.
	 *
	 * @param string $file_name
	 * @param bool   $refresh_script
	 *
	 * @return string
	 */
	protected function get_style_src( $file_name, $refresh_script = false ) {
		if ( $refresh_script ) {
			return get_template_directory_uri() . '/build/styles/' . $file_name . '.js';
		}

		return get_template_directory_uri() . '/build/styles/' . $file_name . '.css';
	}

	/**
	 * Get the asset data.
	 *
	 * @param string $file_name
	 * @param string $type
	 *
	 * @return array
	 */
	protected function get_asset( $file_name, $type ) {
		if ( $type === 'css' ) {
			$asset_path = get_template_directory() . '/build/styles/' . $file_name . '.asset.php';
		} else {
			$asset_path = get_template_directory() . '/build/scripts/' . $file_name . '.asset.php';
		}

		$asset = array(
			'dependencies' => array(),
			'version'      => Helpers::get_theme_version(),
		);

		if ( is_file( $asset_path ) ) {
			$asset = include $asset_path;

			// We must remove that dependency for styles in fast refresh mode. For some reason styles are not loaded otherwise.
			if (
				$type === 'css' &&
				self::is_fast_refresh() &&
				( $index = array_search( $this->refresh_runtime_dependency, $asset['dependencies'] ) ) !== false // phpcs:ignore
			) {
				unset( $asset['dependencies'][ $index ] );
			}
		}

		return $asset;
	}

	/**
	 * Get the final handle for the asset.
	 *
	 * @param string $handle
	 *
	 * @return string
	 */
	protected function get_final_handle( $handle ) {
		$handle = 'chisel-' . $handle;

		if ( self::is_fast_refresh() ) {
			$handle .= '-fast-refresh';
		}

		return $handle;
	}

	/**
	 * Check if current environment is development and runnning in fast refresh mode. Set define( 'WP_ENVIRONMENT_TYPE', 'development' ); in wp-config-local.
	 *
	 * @return bool
	 */
	public static function is_fast_refresh() {
		$runtime = get_template_directory() . '/build/runtime.js';

		return Helpers::is_dev_env() && is_file( $runtime );
	}

	/**
	 * Get the instance of the class.
	 */
	public static function get_instance() {
		static $instance = null;

		if ( null === $instance ) {
			$instance = new self();
		}

		return $instance;
	}
}
